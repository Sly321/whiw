/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      WatchedEpisode: WatchedEpisodeObject
      Episode: EpisodeObject
      Season: SeasonObject
      Series: SeriesObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      WatchedEpisodeConnection: WatchedEpisodeConnectionObject
      WatchedEpisodeEdge: WatchedEpisodeEdgeObject
      AggregateWatchedEpisode: AggregateWatchedEpisodeObject
      EpisodeConnection: EpisodeConnectionObject
      EpisodeEdge: EpisodeEdgeObject
      AggregateEpisode: AggregateEpisodeObject
      SeasonConnection: SeasonConnectionObject
      SeasonEdge: SeasonEdgeObject
      AggregateSeason: AggregateSeasonObject
      SeriesConnection: SeriesConnectionObject
      SeriesEdge: SeriesEdgeObject
      AggregateSeries: AggregateSeriesObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      WatchedEpisodeSubscriptionPayload: WatchedEpisodeSubscriptionPayloadObject
      WatchedEpisodePreviousValues: WatchedEpisodePreviousValuesObject
      EpisodeSubscriptionPayload: EpisodeSubscriptionPayloadObject
      EpisodePreviousValues: EpisodePreviousValuesObject
      SeasonSubscriptionPayload: SeasonSubscriptionPayloadObject
      SeasonPreviousValues: SeasonPreviousValuesObject
      SeriesSubscriptionPayload: SeriesSubscriptionPayloadObject
      SeriesPreviousValues: SeriesPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      WatchedEpisode: WatchedEpisodeFieldDetails
      Episode: EpisodeFieldDetails
      Season: SeasonFieldDetails
      Series: SeriesFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      WatchedEpisodeConnection: WatchedEpisodeConnectionFieldDetails
      WatchedEpisodeEdge: WatchedEpisodeEdgeFieldDetails
      AggregateWatchedEpisode: AggregateWatchedEpisodeFieldDetails
      EpisodeConnection: EpisodeConnectionFieldDetails
      EpisodeEdge: EpisodeEdgeFieldDetails
      AggregateEpisode: AggregateEpisodeFieldDetails
      SeasonConnection: SeasonConnectionFieldDetails
      SeasonEdge: SeasonEdgeFieldDetails
      AggregateSeason: AggregateSeasonFieldDetails
      SeriesConnection: SeriesConnectionFieldDetails
      SeriesEdge: SeriesEdgeFieldDetails
      AggregateSeries: AggregateSeriesFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      WatchedEpisodeSubscriptionPayload: WatchedEpisodeSubscriptionPayloadFieldDetails
      WatchedEpisodePreviousValues: WatchedEpisodePreviousValuesFieldDetails
      EpisodeSubscriptionPayload: EpisodeSubscriptionPayloadFieldDetails
      EpisodePreviousValues: EpisodePreviousValuesFieldDetails
      SeasonSubscriptionPayload: SeasonSubscriptionPayloadFieldDetails
      SeasonPreviousValues: SeasonPreviousValuesFieldDetails
      SeriesSubscriptionPayload: SeriesSubscriptionPayloadFieldDetails
      SeriesPreviousValues: SeriesPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      WatchedEpisodeWhereInput: WatchedEpisodeWhereInputInputObject
      EpisodeWhereInput: EpisodeWhereInputInputObject
      SeasonWhereInput: SeasonWhereInputInputObject
      SeriesWhereInput: SeriesWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      WatchedEpisodeWhereUniqueInput: WatchedEpisodeWhereUniqueInputInputObject
      EpisodeWhereUniqueInput: EpisodeWhereUniqueInputInputObject
      SeasonWhereUniqueInput: SeasonWhereUniqueInputInputObject
      SeriesWhereUniqueInput: SeriesWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      WatchedEpisodeCreateManyWithoutUserInput: WatchedEpisodeCreateManyWithoutUserInputInputObject
      WatchedEpisodeCreateWithoutUserInput: WatchedEpisodeCreateWithoutUserInputInputObject
      EpisodeCreateOneInput: EpisodeCreateOneInputInputObject
      EpisodeCreateInput: EpisodeCreateInputInputObject
      SeasonCreateOneWithoutEpisodesInput: SeasonCreateOneWithoutEpisodesInputInputObject
      SeasonCreateWithoutEpisodesInput: SeasonCreateWithoutEpisodesInputInputObject
      SeriesCreateOneWithoutSeasonsInput: SeriesCreateOneWithoutSeasonsInputInputObject
      SeriesCreateWithoutSeasonsInput: SeriesCreateWithoutSeasonsInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      WatchedEpisodeUpdateManyWithoutUserInput: WatchedEpisodeUpdateManyWithoutUserInputInputObject
      WatchedEpisodeUpdateWithWhereUniqueWithoutUserInput: WatchedEpisodeUpdateWithWhereUniqueWithoutUserInputInputObject
      WatchedEpisodeUpdateWithoutUserDataInput: WatchedEpisodeUpdateWithoutUserDataInputInputObject
      EpisodeUpdateOneRequiredInput: EpisodeUpdateOneRequiredInputInputObject
      EpisodeUpdateDataInput: EpisodeUpdateDataInputInputObject
      SeasonUpdateOneRequiredWithoutEpisodesInput: SeasonUpdateOneRequiredWithoutEpisodesInputInputObject
      SeasonUpdateWithoutEpisodesDataInput: SeasonUpdateWithoutEpisodesDataInputInputObject
      SeriesUpdateOneRequiredWithoutSeasonsInput: SeriesUpdateOneRequiredWithoutSeasonsInputInputObject
      SeriesUpdateWithoutSeasonsDataInput: SeriesUpdateWithoutSeasonsDataInputInputObject
      SeriesUpsertWithoutSeasonsInput: SeriesUpsertWithoutSeasonsInputInputObject
      SeasonUpsertWithoutEpisodesInput: SeasonUpsertWithoutEpisodesInputInputObject
      EpisodeUpsertNestedInput: EpisodeUpsertNestedInputInputObject
      WatchedEpisodeUpsertWithWhereUniqueWithoutUserInput: WatchedEpisodeUpsertWithWhereUniqueWithoutUserInputInputObject
      WatchedEpisodeScalarWhereInput: WatchedEpisodeScalarWhereInputInputObject
      WatchedEpisodeUpdateManyWithWhereNestedInput: WatchedEpisodeUpdateManyWithWhereNestedInputInputObject
      WatchedEpisodeUpdateManyDataInput: WatchedEpisodeUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      WatchedEpisodeCreateInput: WatchedEpisodeCreateInputInputObject
      UserCreateOneWithoutWatchedInput: UserCreateOneWithoutWatchedInputInputObject
      UserCreateWithoutWatchedInput: UserCreateWithoutWatchedInputInputObject
      WatchedEpisodeUpdateInput: WatchedEpisodeUpdateInputInputObject
      UserUpdateOneRequiredWithoutWatchedInput: UserUpdateOneRequiredWithoutWatchedInputInputObject
      UserUpdateWithoutWatchedDataInput: UserUpdateWithoutWatchedDataInputInputObject
      UserUpsertWithoutWatchedInput: UserUpsertWithoutWatchedInputInputObject
      WatchedEpisodeUpdateManyMutationInput: WatchedEpisodeUpdateManyMutationInputInputObject
      EpisodeUpdateInput: EpisodeUpdateInputInputObject
      EpisodeUpdateManyMutationInput: EpisodeUpdateManyMutationInputInputObject
      SeasonCreateInput: SeasonCreateInputInputObject
      EpisodeCreateManyWithoutSeasonInput: EpisodeCreateManyWithoutSeasonInputInputObject
      EpisodeCreateWithoutSeasonInput: EpisodeCreateWithoutSeasonInputInputObject
      SeasonUpdateInput: SeasonUpdateInputInputObject
      EpisodeUpdateManyWithoutSeasonInput: EpisodeUpdateManyWithoutSeasonInputInputObject
      EpisodeUpdateWithWhereUniqueWithoutSeasonInput: EpisodeUpdateWithWhereUniqueWithoutSeasonInputInputObject
      EpisodeUpdateWithoutSeasonDataInput: EpisodeUpdateWithoutSeasonDataInputInputObject
      EpisodeUpsertWithWhereUniqueWithoutSeasonInput: EpisodeUpsertWithWhereUniqueWithoutSeasonInputInputObject
      EpisodeScalarWhereInput: EpisodeScalarWhereInputInputObject
      EpisodeUpdateManyWithWhereNestedInput: EpisodeUpdateManyWithWhereNestedInputInputObject
      EpisodeUpdateManyDataInput: EpisodeUpdateManyDataInputInputObject
      SeasonUpdateManyMutationInput: SeasonUpdateManyMutationInputInputObject
      SeriesCreateInput: SeriesCreateInputInputObject
      SeasonCreateManyWithoutSeriesInput: SeasonCreateManyWithoutSeriesInputInputObject
      SeasonCreateWithoutSeriesInput: SeasonCreateWithoutSeriesInputInputObject
      SeriesUpdateInput: SeriesUpdateInputInputObject
      SeasonUpdateManyWithoutSeriesInput: SeasonUpdateManyWithoutSeriesInputInputObject
      SeasonUpdateWithWhereUniqueWithoutSeriesInput: SeasonUpdateWithWhereUniqueWithoutSeriesInputInputObject
      SeasonUpdateWithoutSeriesDataInput: SeasonUpdateWithoutSeriesDataInputInputObject
      SeasonUpsertWithWhereUniqueWithoutSeriesInput: SeasonUpsertWithWhereUniqueWithoutSeriesInputInputObject
      SeasonScalarWhereInput: SeasonScalarWhereInputInputObject
      SeasonUpdateManyWithWhereNestedInput: SeasonUpdateManyWithWhereNestedInputInputObject
      SeasonUpdateManyDataInput: SeasonUpdateManyDataInputInputObject
      SeriesUpdateManyMutationInput: SeriesUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      WatchedEpisodeSubscriptionWhereInput: WatchedEpisodeSubscriptionWhereInputInputObject
      EpisodeSubscriptionWhereInput: EpisodeSubscriptionWhereInputInputObject
      SeasonSubscriptionWhereInput: SeasonSubscriptionWhereInputInputObject
      SeriesSubscriptionWhereInput: SeriesSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    WatchedEpisodeOrderByInput: WatchedEpisodeOrderByInputValues,
    EpisodeOrderByInput: EpisodeOrderByInputValues,
    SeasonOrderByInput: SeasonOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    SeriesOrderByInput: SeriesOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'watchedEpisode', args?: QueryWatchedEpisodeArgs[] | false, alias?: string  } 
  | { name: 'watchedEpisodes', args?: QueryWatchedEpisodesArgs[] | false, alias?: string  } 
  | { name: 'watchedEpisodesConnection', args?: QueryWatchedEpisodesConnectionArgs[] | false, alias?: string  } 
  | { name: 'episode', args?: QueryEpisodeArgs[] | false, alias?: string  } 
  | { name: 'episodes', args?: QueryEpisodesArgs[] | false, alias?: string  } 
  | { name: 'episodesConnection', args?: QueryEpisodesConnectionArgs[] | false, alias?: string  } 
  | { name: 'season', args?: QuerySeasonArgs[] | false, alias?: string  } 
  | { name: 'seasons', args?: QuerySeasonsArgs[] | false, alias?: string  } 
  | { name: 'seasonsConnection', args?: QuerySeasonsConnectionArgs[] | false, alias?: string  } 
  | { name: 'series', args?: QuerySeriesArgs[] | false, alias?: string  } 
  | { name: 'serieses', args?: QuerySeriesesArgs[] | false, alias?: string  } 
  | { name: 'seriesesConnection', args?: QuerySeriesesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'watchedEpisode'
  | 'watchedEpisodes'
  | 'watchedEpisodesConnection'
  | 'episode'
  | 'episodes'
  | 'episodesConnection'
  | 'season'
  | 'seasons'
  | 'seasonsConnection'
  | 'series'
  | 'serieses'
  | 'seriesesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWatchedEpisodeArgs =
  | 'where'
type QueryWatchedEpisodesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWatchedEpisodesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEpisodeArgs =
  | 'where'
type QueryEpisodesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEpisodesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySeasonArgs =
  | 'where'
type QuerySeasonsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySeasonsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySeriesArgs =
  | 'where'
type QuerySeriesesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySeriesesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  watchedEpisode: {
    type: 'WatchedEpisode'
    args: Record<QueryWatchedEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: WatchedEpisodeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode | null> | prisma.WatchedEpisode | null
  }
  watchedEpisodes: {
    type: 'WatchedEpisode'
    args: Record<QueryWatchedEpisodesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WatchedEpisodeWhereInput | null, orderBy?: prisma.WatchedEpisodeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode[]> | prisma.WatchedEpisode[]
  }
  watchedEpisodesConnection: {
    type: 'WatchedEpisodeConnection'
    args: Record<QueryWatchedEpisodesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WatchedEpisodeWhereInput | null, orderBy?: prisma.WatchedEpisodeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisodeConnection> | prisma.WatchedEpisodeConnection
  }
  episode: {
    type: 'Episode'
    args: Record<QueryEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EpisodeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode | null> | prisma.Episode | null
  }
  episodes: {
    type: 'Episode'
    args: Record<QueryEpisodesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EpisodeWhereInput | null, orderBy?: prisma.EpisodeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode[]> | prisma.Episode[]
  }
  episodesConnection: {
    type: 'EpisodeConnection'
    args: Record<QueryEpisodesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EpisodeWhereInput | null, orderBy?: prisma.EpisodeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EpisodeConnection> | prisma.EpisodeConnection
  }
  season: {
    type: 'Season'
    args: Record<QuerySeasonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SeasonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season | null> | prisma.Season | null
  }
  seasons: {
    type: 'Season'
    args: Record<QuerySeasonsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SeasonWhereInput | null, orderBy?: prisma.SeasonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season[]> | prisma.Season[]
  }
  seasonsConnection: {
    type: 'SeasonConnection'
    args: Record<QuerySeasonsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SeasonWhereInput | null, orderBy?: prisma.SeasonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SeasonConnection> | prisma.SeasonConnection
  }
  series: {
    type: 'Series'
    args: Record<QuerySeriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SeriesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series | null> | prisma.Series | null
  }
  serieses: {
    type: 'Series'
    args: Record<QuerySeriesesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SeriesWhereInput | null, orderBy?: prisma.SeriesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series[]> | prisma.Series[]
  }
  seriesesConnection: {
    type: 'SeriesConnection'
    args: Record<QuerySeriesesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SeriesWhereInput | null, orderBy?: prisma.SeriesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SeriesConnection> | prisma.SeriesConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'watched', args?: UserWatchedArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'watched'


type UserWatchedArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  watched: {
    type: 'WatchedEpisode'
    args: Record<UserWatchedArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: WatchedEpisodeWhereInput | null, orderBy?: prisma.WatchedEpisodeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode[]> | prisma.WatchedEpisode[]
  }
}
  

// Types for WatchedEpisode

type WatchedEpisodeObject =
  | WatchedEpisodeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'episode', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'watched', args?: [] | false, alias?: string  } 

type WatchedEpisodeFields =
  | 'id'
  | 'episode'
  | 'user'
  | 'watched'



  

export interface WatchedEpisodeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  episode: {
    type: 'Episode'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WatchedEpisode">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode> | prisma.Episode
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WatchedEpisode">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  watched: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Episode

type EpisodeObject =
  | EpisodeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'release', args?: [] | false, alias?: string  } 
  | { name: 'season', args?: [] | false, alias?: string  } 

type EpisodeFields =
  | 'id'
  | 'name'
  | 'number'
  | 'release'
  | 'season'



  

export interface EpisodeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  release: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  season: {
    type: 'Season'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Episode">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season> | prisma.Season
  }
}
  

// Types for Season

type SeasonObject =
  | SeasonFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'episodes', args?: SeasonEpisodesArgs[] | false, alias?: string  } 
  | { name: 'series', args?: [] | false, alias?: string  } 

type SeasonFields =
  | 'id'
  | 'number'
  | 'episodes'
  | 'series'


type SeasonEpisodesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface SeasonFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  episodes: {
    type: 'Episode'
    args: Record<SeasonEpisodesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Season">,
      args: { where?: EpisodeWhereInput | null, orderBy?: prisma.EpisodeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode[]> | prisma.Episode[]
  }
  series: {
    type: 'Series'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Season">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series> | prisma.Series
  }
}
  

// Types for Series

type SeriesObject =
  | SeriesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'seasons', args?: SeriesSeasonsArgs[] | false, alias?: string  } 

type SeriesFields =
  | 'id'
  | 'name'
  | 'seasons'


type SeriesSeasonsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface SeriesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  seasons: {
    type: 'Season'
    args: Record<SeriesSeasonsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Series">,
      args: { where?: SeasonWhereInput | null, orderBy?: prisma.SeasonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season[]> | prisma.Season[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WatchedEpisodeConnection

type WatchedEpisodeConnectionObject =
  | WatchedEpisodeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type WatchedEpisodeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface WatchedEpisodeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WatchedEpisodeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'WatchedEpisodeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WatchedEpisodeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisodeEdge[]> | prisma.WatchedEpisodeEdge[]
  }
  aggregate: {
    type: 'AggregateWatchedEpisode'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WatchedEpisodeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateWatchedEpisode> | prisma.AggregateWatchedEpisode
  }
}
  

// Types for WatchedEpisodeEdge

type WatchedEpisodeEdgeObject =
  | WatchedEpisodeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type WatchedEpisodeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface WatchedEpisodeEdgeFieldDetails {
  node: {
    type: 'WatchedEpisode'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WatchedEpisodeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode> | prisma.WatchedEpisode
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateWatchedEpisode

type AggregateWatchedEpisodeObject =
  | AggregateWatchedEpisodeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateWatchedEpisodeFields =
  | 'count'



  

export interface AggregateWatchedEpisodeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EpisodeConnection

type EpisodeConnectionObject =
  | EpisodeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EpisodeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EpisodeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EpisodeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EpisodeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EpisodeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EpisodeEdge[]> | prisma.EpisodeEdge[]
  }
  aggregate: {
    type: 'AggregateEpisode'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EpisodeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEpisode> | prisma.AggregateEpisode
  }
}
  

// Types for EpisodeEdge

type EpisodeEdgeObject =
  | EpisodeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EpisodeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EpisodeEdgeFieldDetails {
  node: {
    type: 'Episode'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EpisodeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode> | prisma.Episode
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEpisode

type AggregateEpisodeObject =
  | AggregateEpisodeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEpisodeFields =
  | 'count'



  

export interface AggregateEpisodeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SeasonConnection

type SeasonConnectionObject =
  | SeasonConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SeasonConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SeasonConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SeasonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SeasonEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SeasonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SeasonEdge[]> | prisma.SeasonEdge[]
  }
  aggregate: {
    type: 'AggregateSeason'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SeasonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSeason> | prisma.AggregateSeason
  }
}
  

// Types for SeasonEdge

type SeasonEdgeObject =
  | SeasonEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SeasonEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SeasonEdgeFieldDetails {
  node: {
    type: 'Season'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SeasonEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season> | prisma.Season
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSeason

type AggregateSeasonObject =
  | AggregateSeasonFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSeasonFields =
  | 'count'



  

export interface AggregateSeasonFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SeriesConnection

type SeriesConnectionObject =
  | SeriesConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SeriesConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SeriesConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SeriesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SeriesEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SeriesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SeriesEdge[]> | prisma.SeriesEdge[]
  }
  aggregate: {
    type: 'AggregateSeries'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SeriesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSeries> | prisma.AggregateSeries
  }
}
  

// Types for SeriesEdge

type SeriesEdgeObject =
  | SeriesEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SeriesEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SeriesEdgeFieldDetails {
  node: {
    type: 'Series'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SeriesEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series> | prisma.Series
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSeries

type AggregateSeriesObject =
  | AggregateSeriesFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSeriesFields =
  | 'count'



  

export interface AggregateSeriesFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createWatchedEpisode', args?: MutationCreateWatchedEpisodeArgs[] | false, alias?: string  } 
  | { name: 'updateWatchedEpisode', args?: MutationUpdateWatchedEpisodeArgs[] | false, alias?: string  } 
  | { name: 'updateManyWatchedEpisodes', args?: MutationUpdateManyWatchedEpisodesArgs[] | false, alias?: string  } 
  | { name: 'upsertWatchedEpisode', args?: MutationUpsertWatchedEpisodeArgs[] | false, alias?: string  } 
  | { name: 'deleteWatchedEpisode', args?: MutationDeleteWatchedEpisodeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyWatchedEpisodes', args?: MutationDeleteManyWatchedEpisodesArgs[] | false, alias?: string  } 
  | { name: 'createEpisode', args?: MutationCreateEpisodeArgs[] | false, alias?: string  } 
  | { name: 'updateEpisode', args?: MutationUpdateEpisodeArgs[] | false, alias?: string  } 
  | { name: 'updateManyEpisodes', args?: MutationUpdateManyEpisodesArgs[] | false, alias?: string  } 
  | { name: 'upsertEpisode', args?: MutationUpsertEpisodeArgs[] | false, alias?: string  } 
  | { name: 'deleteEpisode', args?: MutationDeleteEpisodeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEpisodes', args?: MutationDeleteManyEpisodesArgs[] | false, alias?: string  } 
  | { name: 'createSeason', args?: MutationCreateSeasonArgs[] | false, alias?: string  } 
  | { name: 'updateSeason', args?: MutationUpdateSeasonArgs[] | false, alias?: string  } 
  | { name: 'updateManySeasons', args?: MutationUpdateManySeasonsArgs[] | false, alias?: string  } 
  | { name: 'upsertSeason', args?: MutationUpsertSeasonArgs[] | false, alias?: string  } 
  | { name: 'deleteSeason', args?: MutationDeleteSeasonArgs[] | false, alias?: string  } 
  | { name: 'deleteManySeasons', args?: MutationDeleteManySeasonsArgs[] | false, alias?: string  } 
  | { name: 'createSeries', args?: MutationCreateSeriesArgs[] | false, alias?: string  } 
  | { name: 'updateSeries', args?: MutationUpdateSeriesArgs[] | false, alias?: string  } 
  | { name: 'updateManySerieses', args?: MutationUpdateManySeriesesArgs[] | false, alias?: string  } 
  | { name: 'upsertSeries', args?: MutationUpsertSeriesArgs[] | false, alias?: string  } 
  | { name: 'deleteSeries', args?: MutationDeleteSeriesArgs[] | false, alias?: string  } 
  | { name: 'deleteManySerieses', args?: MutationDeleteManySeriesesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createWatchedEpisode'
  | 'updateWatchedEpisode'
  | 'updateManyWatchedEpisodes'
  | 'upsertWatchedEpisode'
  | 'deleteWatchedEpisode'
  | 'deleteManyWatchedEpisodes'
  | 'createEpisode'
  | 'updateEpisode'
  | 'updateManyEpisodes'
  | 'upsertEpisode'
  | 'deleteEpisode'
  | 'deleteManyEpisodes'
  | 'createSeason'
  | 'updateSeason'
  | 'updateManySeasons'
  | 'upsertSeason'
  | 'deleteSeason'
  | 'deleteManySeasons'
  | 'createSeries'
  | 'updateSeries'
  | 'updateManySerieses'
  | 'upsertSeries'
  | 'deleteSeries'
  | 'deleteManySerieses'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateWatchedEpisodeArgs =
  | 'data'
type MutationUpdateWatchedEpisodeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyWatchedEpisodesArgs =
  | 'data'
  | 'where'
type MutationUpsertWatchedEpisodeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteWatchedEpisodeArgs =
  | 'where'
type MutationDeleteManyWatchedEpisodesArgs =
  | 'where'
type MutationCreateEpisodeArgs =
  | 'data'
type MutationUpdateEpisodeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEpisodesArgs =
  | 'data'
  | 'where'
type MutationUpsertEpisodeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEpisodeArgs =
  | 'where'
type MutationDeleteManyEpisodesArgs =
  | 'where'
type MutationCreateSeasonArgs =
  | 'data'
type MutationUpdateSeasonArgs =
  | 'data'
  | 'where'
type MutationUpdateManySeasonsArgs =
  | 'data'
  | 'where'
type MutationUpsertSeasonArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSeasonArgs =
  | 'where'
type MutationDeleteManySeasonsArgs =
  | 'where'
type MutationCreateSeriesArgs =
  | 'data'
type MutationUpdateSeriesArgs =
  | 'data'
  | 'where'
type MutationUpdateManySeriesesArgs =
  | 'data'
  | 'where'
type MutationUpsertSeriesArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSeriesArgs =
  | 'where'
type MutationDeleteManySeriesesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createWatchedEpisode: {
    type: 'WatchedEpisode'
    args: Record<MutationCreateWatchedEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WatchedEpisodeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode> | prisma.WatchedEpisode
  }
  updateWatchedEpisode: {
    type: 'WatchedEpisode'
    args: Record<MutationUpdateWatchedEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WatchedEpisodeUpdateInput, where: WatchedEpisodeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode | null> | prisma.WatchedEpisode | null
  }
  updateManyWatchedEpisodes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyWatchedEpisodesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WatchedEpisodeUpdateManyMutationInput, where?: WatchedEpisodeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertWatchedEpisode: {
    type: 'WatchedEpisode'
    args: Record<MutationUpsertWatchedEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WatchedEpisodeWhereUniqueInput, create: WatchedEpisodeCreateInput, update: WatchedEpisodeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode> | prisma.WatchedEpisode
  }
  deleteWatchedEpisode: {
    type: 'WatchedEpisode'
    args: Record<MutationDeleteWatchedEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WatchedEpisodeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode | null> | prisma.WatchedEpisode | null
  }
  deleteManyWatchedEpisodes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyWatchedEpisodesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: WatchedEpisodeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEpisode: {
    type: 'Episode'
    args: Record<MutationCreateEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EpisodeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode> | prisma.Episode
  }
  updateEpisode: {
    type: 'Episode'
    args: Record<MutationUpdateEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EpisodeUpdateInput, where: EpisodeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode | null> | prisma.Episode | null
  }
  updateManyEpisodes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEpisodesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EpisodeUpdateManyMutationInput, where?: EpisodeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEpisode: {
    type: 'Episode'
    args: Record<MutationUpsertEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EpisodeWhereUniqueInput, create: EpisodeCreateInput, update: EpisodeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode> | prisma.Episode
  }
  deleteEpisode: {
    type: 'Episode'
    args: Record<MutationDeleteEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EpisodeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode | null> | prisma.Episode | null
  }
  deleteManyEpisodes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEpisodesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EpisodeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSeason: {
    type: 'Season'
    args: Record<MutationCreateSeasonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SeasonCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season> | prisma.Season
  }
  updateSeason: {
    type: 'Season'
    args: Record<MutationUpdateSeasonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SeasonUpdateInput, where: SeasonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season | null> | prisma.Season | null
  }
  updateManySeasons: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySeasonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SeasonUpdateManyMutationInput, where?: SeasonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSeason: {
    type: 'Season'
    args: Record<MutationUpsertSeasonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SeasonWhereUniqueInput, create: SeasonCreateInput, update: SeasonUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season> | prisma.Season
  }
  deleteSeason: {
    type: 'Season'
    args: Record<MutationDeleteSeasonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SeasonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season | null> | prisma.Season | null
  }
  deleteManySeasons: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySeasonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SeasonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSeries: {
    type: 'Series'
    args: Record<MutationCreateSeriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SeriesCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series> | prisma.Series
  }
  updateSeries: {
    type: 'Series'
    args: Record<MutationUpdateSeriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SeriesUpdateInput, where: SeriesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series | null> | prisma.Series | null
  }
  updateManySerieses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySeriesesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SeriesUpdateManyMutationInput, where?: SeriesWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSeries: {
    type: 'Series'
    args: Record<MutationUpsertSeriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SeriesWhereUniqueInput, create: SeriesCreateInput, update: SeriesUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series> | prisma.Series
  }
  deleteSeries: {
    type: 'Series'
    args: Record<MutationDeleteSeriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SeriesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series | null> | prisma.Series | null
  }
  deleteManySerieses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySeriesesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SeriesWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'watchedEpisode', args?: SubscriptionWatchedEpisodeArgs[] | false, alias?: string  } 
  | { name: 'episode', args?: SubscriptionEpisodeArgs[] | false, alias?: string  } 
  | { name: 'season', args?: SubscriptionSeasonArgs[] | false, alias?: string  } 
  | { name: 'series', args?: SubscriptionSeriesArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'watchedEpisode'
  | 'episode'
  | 'season'
  | 'series'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionWatchedEpisodeArgs =
  | 'where'
type SubscriptionEpisodeArgs =
  | 'where'
type SubscriptionSeasonArgs =
  | 'where'
type SubscriptionSeriesArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  watchedEpisode: {
    type: 'WatchedEpisodeSubscriptionPayload'
    args: Record<SubscriptionWatchedEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: WatchedEpisodeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisodeSubscriptionPayload | null> | prisma.WatchedEpisodeSubscriptionPayload | null
  }
  episode: {
    type: 'EpisodeSubscriptionPayload'
    args: Record<SubscriptionEpisodeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EpisodeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EpisodeSubscriptionPayload | null> | prisma.EpisodeSubscriptionPayload | null
  }
  season: {
    type: 'SeasonSubscriptionPayload'
    args: Record<SubscriptionSeasonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SeasonSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SeasonSubscriptionPayload | null> | prisma.SeasonSubscriptionPayload | null
  }
  series: {
    type: 'SeriesSubscriptionPayload'
    args: Record<SubscriptionSeriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SeriesSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SeriesSubscriptionPayload | null> | prisma.SeriesSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WatchedEpisodeSubscriptionPayload

type WatchedEpisodeSubscriptionPayloadObject =
  | WatchedEpisodeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type WatchedEpisodeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface WatchedEpisodeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WatchedEpisodeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'WatchedEpisode'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WatchedEpisodeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisode | null> | prisma.WatchedEpisode | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'WatchedEpisodePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WatchedEpisodeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WatchedEpisodePreviousValues | null> | prisma.WatchedEpisodePreviousValues | null
  }
}
  

// Types for WatchedEpisodePreviousValues

type WatchedEpisodePreviousValuesObject =
  | WatchedEpisodePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'watched', args?: [] | false, alias?: string  } 

type WatchedEpisodePreviousValuesFields =
  | 'id'
  | 'watched'



  

export interface WatchedEpisodePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  watched: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EpisodeSubscriptionPayload

type EpisodeSubscriptionPayloadObject =
  | EpisodeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EpisodeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EpisodeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EpisodeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Episode'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EpisodeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Episode | null> | prisma.Episode | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EpisodePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EpisodeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EpisodePreviousValues | null> | prisma.EpisodePreviousValues | null
  }
}
  

// Types for EpisodePreviousValues

type EpisodePreviousValuesObject =
  | EpisodePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'release', args?: [] | false, alias?: string  } 

type EpisodePreviousValuesFields =
  | 'id'
  | 'name'
  | 'number'
  | 'release'



  

export interface EpisodePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  release: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for SeasonSubscriptionPayload

type SeasonSubscriptionPayloadObject =
  | SeasonSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SeasonSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SeasonSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SeasonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Season'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SeasonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Season | null> | prisma.Season | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SeasonPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SeasonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SeasonPreviousValues | null> | prisma.SeasonPreviousValues | null
  }
}
  

// Types for SeasonPreviousValues

type SeasonPreviousValuesObject =
  | SeasonPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 

type SeasonPreviousValuesFields =
  | 'id'
  | 'number'



  

export interface SeasonPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SeriesSubscriptionPayload

type SeriesSubscriptionPayloadObject =
  | SeriesSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SeriesSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SeriesSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SeriesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Series'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SeriesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Series | null> | prisma.Series | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SeriesPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SeriesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SeriesPreviousValues | null> | prisma.SeriesPreviousValues | null
  }
}
  

// Types for SeriesPreviousValues

type SeriesPreviousValuesObject =
  | SeriesPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type SeriesPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface SeriesPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface WatchedEpisodeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  episode?: EpisodeWhereInput | null
  user?: UserWhereInput | null
  watched?: boolean | null
  watched_not?: boolean | null
  AND?: WatchedEpisodeWhereInput[]
  OR?: WatchedEpisodeWhereInput[]
  NOT?: WatchedEpisodeWhereInput[]
}
export type WatchedEpisodeWhereInputInputObject =
  | Extract<keyof WatchedEpisodeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'episode', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'watched', alias?: string  } 
  | { name: 'watched_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EpisodeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  release?: string | null
  release_not?: string | null
  release_in?: string[]
  release_not_in?: string[]
  release_lt?: string | null
  release_lte?: string | null
  release_gt?: string | null
  release_gte?: string | null
  season?: SeasonWhereInput | null
  AND?: EpisodeWhereInput[]
  OR?: EpisodeWhereInput[]
  NOT?: EpisodeWhereInput[]
}
export type EpisodeWhereInputInputObject =
  | Extract<keyof EpisodeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'release', alias?: string  } 
  | { name: 'release_not', alias?: string  } 
  | { name: 'release_in', alias?: string  } 
  | { name: 'release_not_in', alias?: string  } 
  | { name: 'release_lt', alias?: string  } 
  | { name: 'release_lte', alias?: string  } 
  | { name: 'release_gt', alias?: string  } 
  | { name: 'release_gte', alias?: string  } 
  | { name: 'season', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SeasonWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  episodes_every?: EpisodeWhereInput | null
  episodes_some?: EpisodeWhereInput | null
  episodes_none?: EpisodeWhereInput | null
  series?: SeriesWhereInput | null
  AND?: SeasonWhereInput[]
  OR?: SeasonWhereInput[]
  NOT?: SeasonWhereInput[]
}
export type SeasonWhereInputInputObject =
  | Extract<keyof SeasonWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'episodes_every', alias?: string  } 
  | { name: 'episodes_some', alias?: string  } 
  | { name: 'episodes_none', alias?: string  } 
  | { name: 'series', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SeriesWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  seasons_every?: SeasonWhereInput | null
  seasons_some?: SeasonWhereInput | null
  seasons_none?: SeasonWhereInput | null
  AND?: SeriesWhereInput[]
  OR?: SeriesWhereInput[]
  NOT?: SeriesWhereInput[]
}
export type SeriesWhereInputInputObject =
  | Extract<keyof SeriesWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'seasons_every', alias?: string  } 
  | { name: 'seasons_some', alias?: string  } 
  | { name: 'seasons_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  watched_every?: WatchedEpisodeWhereInput | null
  watched_some?: WatchedEpisodeWhereInput | null
  watched_none?: WatchedEpisodeWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'watched_every', alias?: string  } 
  | { name: 'watched_some', alias?: string  } 
  | { name: 'watched_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WatchedEpisodeWhereUniqueInput {
  id?: string | null
}
export type WatchedEpisodeWhereUniqueInputInputObject =
  | Extract<keyof WatchedEpisodeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EpisodeWhereUniqueInput {
  id?: string | null
}
export type EpisodeWhereUniqueInputInputObject =
  | Extract<keyof EpisodeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SeasonWhereUniqueInput {
  id?: string | null
}
export type SeasonWhereUniqueInputInputObject =
  | Extract<keyof SeasonWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SeriesWhereUniqueInput {
  id?: string | null
}
export type SeriesWhereUniqueInputInputObject =
  | Extract<keyof SeriesWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
  watched?: WatchedEpisodeCreateManyWithoutUserInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'watched', alias?: string  } 
  
export interface WatchedEpisodeCreateManyWithoutUserInput {
  create?: WatchedEpisodeCreateWithoutUserInput[]
  connect?: WatchedEpisodeWhereUniqueInput[]
}
export type WatchedEpisodeCreateManyWithoutUserInputInputObject =
  | Extract<keyof WatchedEpisodeCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WatchedEpisodeCreateWithoutUserInput {
  id?: string | null
  episode?: EpisodeCreateOneInput
  watched?: boolean | null
}
export type WatchedEpisodeCreateWithoutUserInputInputObject =
  | Extract<keyof WatchedEpisodeCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'episode', alias?: string  } 
  | { name: 'watched', alias?: string  } 
  
export interface EpisodeCreateOneInput {
  create?: EpisodeCreateInput | null
  connect?: EpisodeWhereUniqueInput | null
}
export type EpisodeCreateOneInputInputObject =
  | Extract<keyof EpisodeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EpisodeCreateInput {
  id?: string | null
  name?: string | null
  number?: number
  release?: string | null
  season?: SeasonCreateOneWithoutEpisodesInput
}
export type EpisodeCreateInputInputObject =
  | Extract<keyof EpisodeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'release', alias?: string  } 
  | { name: 'season', alias?: string  } 
  
export interface SeasonCreateOneWithoutEpisodesInput {
  create?: SeasonCreateWithoutEpisodesInput | null
  connect?: SeasonWhereUniqueInput | null
}
export type SeasonCreateOneWithoutEpisodesInputInputObject =
  | Extract<keyof SeasonCreateOneWithoutEpisodesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SeasonCreateWithoutEpisodesInput {
  id?: string | null
  number?: number
  series?: SeriesCreateOneWithoutSeasonsInput
}
export type SeasonCreateWithoutEpisodesInputInputObject =
  | Extract<keyof SeasonCreateWithoutEpisodesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'series', alias?: string  } 
  
export interface SeriesCreateOneWithoutSeasonsInput {
  create?: SeriesCreateWithoutSeasonsInput | null
  connect?: SeriesWhereUniqueInput | null
}
export type SeriesCreateOneWithoutSeasonsInputInputObject =
  | Extract<keyof SeriesCreateOneWithoutSeasonsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SeriesCreateWithoutSeasonsInput {
  id?: string | null
  name?: string
}
export type SeriesCreateWithoutSeasonsInputInputObject =
  | Extract<keyof SeriesCreateWithoutSeasonsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  watched?: WatchedEpisodeUpdateManyWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'watched', alias?: string  } 
  
export interface WatchedEpisodeUpdateManyWithoutUserInput {
  create?: WatchedEpisodeCreateWithoutUserInput[]
  delete?: WatchedEpisodeWhereUniqueInput[]
  connect?: WatchedEpisodeWhereUniqueInput[]
  set?: WatchedEpisodeWhereUniqueInput[]
  disconnect?: WatchedEpisodeWhereUniqueInput[]
  update?: WatchedEpisodeUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: WatchedEpisodeUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: WatchedEpisodeScalarWhereInput[]
  updateMany?: WatchedEpisodeUpdateManyWithWhereNestedInput[]
}
export type WatchedEpisodeUpdateManyWithoutUserInputInputObject =
  | Extract<keyof WatchedEpisodeUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface WatchedEpisodeUpdateWithWhereUniqueWithoutUserInput {
  where?: WatchedEpisodeWhereUniqueInput
  data?: WatchedEpisodeUpdateWithoutUserDataInput
}
export type WatchedEpisodeUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof WatchedEpisodeUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WatchedEpisodeUpdateWithoutUserDataInput {
  episode?: EpisodeUpdateOneRequiredInput | null
  watched?: boolean | null
}
export type WatchedEpisodeUpdateWithoutUserDataInputInputObject =
  | Extract<keyof WatchedEpisodeUpdateWithoutUserDataInput, string>
  | { name: 'episode', alias?: string  } 
  | { name: 'watched', alias?: string  } 
  
export interface EpisodeUpdateOneRequiredInput {
  create?: EpisodeCreateInput | null
  update?: EpisodeUpdateDataInput | null
  upsert?: EpisodeUpsertNestedInput | null
  connect?: EpisodeWhereUniqueInput | null
}
export type EpisodeUpdateOneRequiredInputInputObject =
  | Extract<keyof EpisodeUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EpisodeUpdateDataInput {
  name?: string | null
  number?: number | null
  release?: string | null
  season?: SeasonUpdateOneRequiredWithoutEpisodesInput | null
}
export type EpisodeUpdateDataInputInputObject =
  | Extract<keyof EpisodeUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'release', alias?: string  } 
  | { name: 'season', alias?: string  } 
  
export interface SeasonUpdateOneRequiredWithoutEpisodesInput {
  create?: SeasonCreateWithoutEpisodesInput | null
  update?: SeasonUpdateWithoutEpisodesDataInput | null
  upsert?: SeasonUpsertWithoutEpisodesInput | null
  connect?: SeasonWhereUniqueInput | null
}
export type SeasonUpdateOneRequiredWithoutEpisodesInputInputObject =
  | Extract<keyof SeasonUpdateOneRequiredWithoutEpisodesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SeasonUpdateWithoutEpisodesDataInput {
  number?: number | null
  series?: SeriesUpdateOneRequiredWithoutSeasonsInput | null
}
export type SeasonUpdateWithoutEpisodesDataInputInputObject =
  | Extract<keyof SeasonUpdateWithoutEpisodesDataInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'series', alias?: string  } 
  
export interface SeriesUpdateOneRequiredWithoutSeasonsInput {
  create?: SeriesCreateWithoutSeasonsInput | null
  update?: SeriesUpdateWithoutSeasonsDataInput | null
  upsert?: SeriesUpsertWithoutSeasonsInput | null
  connect?: SeriesWhereUniqueInput | null
}
export type SeriesUpdateOneRequiredWithoutSeasonsInputInputObject =
  | Extract<keyof SeriesUpdateOneRequiredWithoutSeasonsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SeriesUpdateWithoutSeasonsDataInput {
  name?: string | null
}
export type SeriesUpdateWithoutSeasonsDataInputInputObject =
  | Extract<keyof SeriesUpdateWithoutSeasonsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface SeriesUpsertWithoutSeasonsInput {
  update?: SeriesUpdateWithoutSeasonsDataInput
  create?: SeriesCreateWithoutSeasonsInput
}
export type SeriesUpsertWithoutSeasonsInputInputObject =
  | Extract<keyof SeriesUpsertWithoutSeasonsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SeasonUpsertWithoutEpisodesInput {
  update?: SeasonUpdateWithoutEpisodesDataInput
  create?: SeasonCreateWithoutEpisodesInput
}
export type SeasonUpsertWithoutEpisodesInputInputObject =
  | Extract<keyof SeasonUpsertWithoutEpisodesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EpisodeUpsertNestedInput {
  update?: EpisodeUpdateDataInput
  create?: EpisodeCreateInput
}
export type EpisodeUpsertNestedInputInputObject =
  | Extract<keyof EpisodeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WatchedEpisodeUpsertWithWhereUniqueWithoutUserInput {
  where?: WatchedEpisodeWhereUniqueInput
  update?: WatchedEpisodeUpdateWithoutUserDataInput
  create?: WatchedEpisodeCreateWithoutUserInput
}
export type WatchedEpisodeUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof WatchedEpisodeUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WatchedEpisodeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  watched?: boolean | null
  watched_not?: boolean | null
  AND?: WatchedEpisodeScalarWhereInput[]
  OR?: WatchedEpisodeScalarWhereInput[]
  NOT?: WatchedEpisodeScalarWhereInput[]
}
export type WatchedEpisodeScalarWhereInputInputObject =
  | Extract<keyof WatchedEpisodeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'watched', alias?: string  } 
  | { name: 'watched_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WatchedEpisodeUpdateManyWithWhereNestedInput {
  where?: WatchedEpisodeScalarWhereInput
  data?: WatchedEpisodeUpdateManyDataInput
}
export type WatchedEpisodeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof WatchedEpisodeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WatchedEpisodeUpdateManyDataInput {
  watched?: boolean | null
}
export type WatchedEpisodeUpdateManyDataInputInputObject =
  | Extract<keyof WatchedEpisodeUpdateManyDataInput, string>
  | { name: 'watched', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface WatchedEpisodeCreateInput {
  id?: string | null
  episode?: EpisodeCreateOneInput
  user?: UserCreateOneWithoutWatchedInput
  watched?: boolean | null
}
export type WatchedEpisodeCreateInputInputObject =
  | Extract<keyof WatchedEpisodeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'episode', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'watched', alias?: string  } 
  
export interface UserCreateOneWithoutWatchedInput {
  create?: UserCreateWithoutWatchedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutWatchedInputInputObject =
  | Extract<keyof UserCreateOneWithoutWatchedInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutWatchedInput {
  id?: string | null
  name?: string
}
export type UserCreateWithoutWatchedInputInputObject =
  | Extract<keyof UserCreateWithoutWatchedInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface WatchedEpisodeUpdateInput {
  episode?: EpisodeUpdateOneRequiredInput | null
  user?: UserUpdateOneRequiredWithoutWatchedInput | null
  watched?: boolean | null
}
export type WatchedEpisodeUpdateInputInputObject =
  | Extract<keyof WatchedEpisodeUpdateInput, string>
  | { name: 'episode', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'watched', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutWatchedInput {
  create?: UserCreateWithoutWatchedInput | null
  update?: UserUpdateWithoutWatchedDataInput | null
  upsert?: UserUpsertWithoutWatchedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutWatchedInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutWatchedInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutWatchedDataInput {
  name?: string | null
}
export type UserUpdateWithoutWatchedDataInputInputObject =
  | Extract<keyof UserUpdateWithoutWatchedDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserUpsertWithoutWatchedInput {
  update?: UserUpdateWithoutWatchedDataInput
  create?: UserCreateWithoutWatchedInput
}
export type UserUpsertWithoutWatchedInputInputObject =
  | Extract<keyof UserUpsertWithoutWatchedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WatchedEpisodeUpdateManyMutationInput {
  watched?: boolean | null
}
export type WatchedEpisodeUpdateManyMutationInputInputObject =
  | Extract<keyof WatchedEpisodeUpdateManyMutationInput, string>
  | { name: 'watched', alias?: string  } 
  
export interface EpisodeUpdateInput {
  name?: string | null
  number?: number | null
  release?: string | null
  season?: SeasonUpdateOneRequiredWithoutEpisodesInput | null
}
export type EpisodeUpdateInputInputObject =
  | Extract<keyof EpisodeUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'release', alias?: string  } 
  | { name: 'season', alias?: string  } 
  
export interface EpisodeUpdateManyMutationInput {
  name?: string | null
  number?: number | null
  release?: string | null
}
export type EpisodeUpdateManyMutationInputInputObject =
  | Extract<keyof EpisodeUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'release', alias?: string  } 
  
export interface SeasonCreateInput {
  id?: string | null
  number?: number
  episodes?: EpisodeCreateManyWithoutSeasonInput | null
  series?: SeriesCreateOneWithoutSeasonsInput
}
export type SeasonCreateInputInputObject =
  | Extract<keyof SeasonCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'episodes', alias?: string  } 
  | { name: 'series', alias?: string  } 
  
export interface EpisodeCreateManyWithoutSeasonInput {
  create?: EpisodeCreateWithoutSeasonInput[]
  connect?: EpisodeWhereUniqueInput[]
}
export type EpisodeCreateManyWithoutSeasonInputInputObject =
  | Extract<keyof EpisodeCreateManyWithoutSeasonInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EpisodeCreateWithoutSeasonInput {
  id?: string | null
  name?: string | null
  number?: number
  release?: string | null
}
export type EpisodeCreateWithoutSeasonInputInputObject =
  | Extract<keyof EpisodeCreateWithoutSeasonInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'release', alias?: string  } 
  
export interface SeasonUpdateInput {
  number?: number | null
  episodes?: EpisodeUpdateManyWithoutSeasonInput | null
  series?: SeriesUpdateOneRequiredWithoutSeasonsInput | null
}
export type SeasonUpdateInputInputObject =
  | Extract<keyof SeasonUpdateInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'episodes', alias?: string  } 
  | { name: 'series', alias?: string  } 
  
export interface EpisodeUpdateManyWithoutSeasonInput {
  create?: EpisodeCreateWithoutSeasonInput[]
  delete?: EpisodeWhereUniqueInput[]
  connect?: EpisodeWhereUniqueInput[]
  set?: EpisodeWhereUniqueInput[]
  disconnect?: EpisodeWhereUniqueInput[]
  update?: EpisodeUpdateWithWhereUniqueWithoutSeasonInput[]
  upsert?: EpisodeUpsertWithWhereUniqueWithoutSeasonInput[]
  deleteMany?: EpisodeScalarWhereInput[]
  updateMany?: EpisodeUpdateManyWithWhereNestedInput[]
}
export type EpisodeUpdateManyWithoutSeasonInputInputObject =
  | Extract<keyof EpisodeUpdateManyWithoutSeasonInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EpisodeUpdateWithWhereUniqueWithoutSeasonInput {
  where?: EpisodeWhereUniqueInput
  data?: EpisodeUpdateWithoutSeasonDataInput
}
export type EpisodeUpdateWithWhereUniqueWithoutSeasonInputInputObject =
  | Extract<keyof EpisodeUpdateWithWhereUniqueWithoutSeasonInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EpisodeUpdateWithoutSeasonDataInput {
  name?: string | null
  number?: number | null
  release?: string | null
}
export type EpisodeUpdateWithoutSeasonDataInputInputObject =
  | Extract<keyof EpisodeUpdateWithoutSeasonDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'release', alias?: string  } 
  
export interface EpisodeUpsertWithWhereUniqueWithoutSeasonInput {
  where?: EpisodeWhereUniqueInput
  update?: EpisodeUpdateWithoutSeasonDataInput
  create?: EpisodeCreateWithoutSeasonInput
}
export type EpisodeUpsertWithWhereUniqueWithoutSeasonInputInputObject =
  | Extract<keyof EpisodeUpsertWithWhereUniqueWithoutSeasonInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EpisodeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  release?: string | null
  release_not?: string | null
  release_in?: string[]
  release_not_in?: string[]
  release_lt?: string | null
  release_lte?: string | null
  release_gt?: string | null
  release_gte?: string | null
  AND?: EpisodeScalarWhereInput[]
  OR?: EpisodeScalarWhereInput[]
  NOT?: EpisodeScalarWhereInput[]
}
export type EpisodeScalarWhereInputInputObject =
  | Extract<keyof EpisodeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'release', alias?: string  } 
  | { name: 'release_not', alias?: string  } 
  | { name: 'release_in', alias?: string  } 
  | { name: 'release_not_in', alias?: string  } 
  | { name: 'release_lt', alias?: string  } 
  | { name: 'release_lte', alias?: string  } 
  | { name: 'release_gt', alias?: string  } 
  | { name: 'release_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EpisodeUpdateManyWithWhereNestedInput {
  where?: EpisodeScalarWhereInput
  data?: EpisodeUpdateManyDataInput
}
export type EpisodeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EpisodeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EpisodeUpdateManyDataInput {
  name?: string | null
  number?: number | null
  release?: string | null
}
export type EpisodeUpdateManyDataInputInputObject =
  | Extract<keyof EpisodeUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'release', alias?: string  } 
  
export interface SeasonUpdateManyMutationInput {
  number?: number | null
}
export type SeasonUpdateManyMutationInputInputObject =
  | Extract<keyof SeasonUpdateManyMutationInput, string>
  | { name: 'number', alias?: string  } 
  
export interface SeriesCreateInput {
  id?: string | null
  name?: string
  seasons?: SeasonCreateManyWithoutSeriesInput | null
}
export type SeriesCreateInputInputObject =
  | Extract<keyof SeriesCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'seasons', alias?: string  } 
  
export interface SeasonCreateManyWithoutSeriesInput {
  create?: SeasonCreateWithoutSeriesInput[]
  connect?: SeasonWhereUniqueInput[]
}
export type SeasonCreateManyWithoutSeriesInputInputObject =
  | Extract<keyof SeasonCreateManyWithoutSeriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SeasonCreateWithoutSeriesInput {
  id?: string | null
  number?: number
  episodes?: EpisodeCreateManyWithoutSeasonInput | null
}
export type SeasonCreateWithoutSeriesInputInputObject =
  | Extract<keyof SeasonCreateWithoutSeriesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'episodes', alias?: string  } 
  
export interface SeriesUpdateInput {
  name?: string | null
  seasons?: SeasonUpdateManyWithoutSeriesInput | null
}
export type SeriesUpdateInputInputObject =
  | Extract<keyof SeriesUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'seasons', alias?: string  } 
  
export interface SeasonUpdateManyWithoutSeriesInput {
  create?: SeasonCreateWithoutSeriesInput[]
  delete?: SeasonWhereUniqueInput[]
  connect?: SeasonWhereUniqueInput[]
  set?: SeasonWhereUniqueInput[]
  disconnect?: SeasonWhereUniqueInput[]
  update?: SeasonUpdateWithWhereUniqueWithoutSeriesInput[]
  upsert?: SeasonUpsertWithWhereUniqueWithoutSeriesInput[]
  deleteMany?: SeasonScalarWhereInput[]
  updateMany?: SeasonUpdateManyWithWhereNestedInput[]
}
export type SeasonUpdateManyWithoutSeriesInputInputObject =
  | Extract<keyof SeasonUpdateManyWithoutSeriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface SeasonUpdateWithWhereUniqueWithoutSeriesInput {
  where?: SeasonWhereUniqueInput
  data?: SeasonUpdateWithoutSeriesDataInput
}
export type SeasonUpdateWithWhereUniqueWithoutSeriesInputInputObject =
  | Extract<keyof SeasonUpdateWithWhereUniqueWithoutSeriesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SeasonUpdateWithoutSeriesDataInput {
  number?: number | null
  episodes?: EpisodeUpdateManyWithoutSeasonInput | null
}
export type SeasonUpdateWithoutSeriesDataInputInputObject =
  | Extract<keyof SeasonUpdateWithoutSeriesDataInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'episodes', alias?: string  } 
  
export interface SeasonUpsertWithWhereUniqueWithoutSeriesInput {
  where?: SeasonWhereUniqueInput
  update?: SeasonUpdateWithoutSeriesDataInput
  create?: SeasonCreateWithoutSeriesInput
}
export type SeasonUpsertWithWhereUniqueWithoutSeriesInputInputObject =
  | Extract<keyof SeasonUpsertWithWhereUniqueWithoutSeriesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SeasonScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  AND?: SeasonScalarWhereInput[]
  OR?: SeasonScalarWhereInput[]
  NOT?: SeasonScalarWhereInput[]
}
export type SeasonScalarWhereInputInputObject =
  | Extract<keyof SeasonScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SeasonUpdateManyWithWhereNestedInput {
  where?: SeasonScalarWhereInput
  data?: SeasonUpdateManyDataInput
}
export type SeasonUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof SeasonUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SeasonUpdateManyDataInput {
  number?: number | null
}
export type SeasonUpdateManyDataInputInputObject =
  | Extract<keyof SeasonUpdateManyDataInput, string>
  | { name: 'number', alias?: string  } 
  
export interface SeriesUpdateManyMutationInput {
  name?: string | null
}
export type SeriesUpdateManyMutationInputInputObject =
  | Extract<keyof SeriesUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WatchedEpisodeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: WatchedEpisodeWhereInput | null
  AND?: WatchedEpisodeSubscriptionWhereInput[]
  OR?: WatchedEpisodeSubscriptionWhereInput[]
  NOT?: WatchedEpisodeSubscriptionWhereInput[]
}
export type WatchedEpisodeSubscriptionWhereInputInputObject =
  | Extract<keyof WatchedEpisodeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EpisodeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EpisodeWhereInput | null
  AND?: EpisodeSubscriptionWhereInput[]
  OR?: EpisodeSubscriptionWhereInput[]
  NOT?: EpisodeSubscriptionWhereInput[]
}
export type EpisodeSubscriptionWhereInputInputObject =
  | Extract<keyof EpisodeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SeasonSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SeasonWhereInput | null
  AND?: SeasonSubscriptionWhereInput[]
  OR?: SeasonSubscriptionWhereInput[]
  NOT?: SeasonSubscriptionWhereInput[]
}
export type SeasonSubscriptionWhereInputInputObject =
  | Extract<keyof SeasonSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SeriesSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SeriesWhereInput | null
  AND?: SeriesSubscriptionWhereInput[]
  OR?: SeriesSubscriptionWhereInput[]
  NOT?: SeriesSubscriptionWhereInput[]
}
export type SeriesSubscriptionWhereInputInputObject =
  | Extract<keyof SeriesSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type WatchedEpisodeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'watched_ASC'
  | 'watched_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EpisodeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'number_ASC'
  | 'number_DESC'
  | 'release_ASC'
  | 'release_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SeasonOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'number_ASC'
  | 'number_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SeriesOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  