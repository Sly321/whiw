// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  episode: (where?: EpisodeWhereInput) => Promise<boolean>;
  season: (where?: SeasonWhereInput) => Promise<boolean>;
  series: (where?: SeriesWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userSeries: (where?: UserSeriesWhereInput) => Promise<boolean>;
  watchedEpisode: (where?: WatchedEpisodeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  episode: (where: EpisodeWhereUniqueInput) => EpisodeNullablePromise;
  episodes: (args?: {
    where?: EpisodeWhereInput;
    orderBy?: EpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Episode>;
  episodesConnection: (args?: {
    where?: EpisodeWhereInput;
    orderBy?: EpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EpisodeConnectionPromise;
  season: (where: SeasonWhereUniqueInput) => SeasonNullablePromise;
  seasons: (args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Season>;
  seasonsConnection: (args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SeasonConnectionPromise;
  series: (where: SeriesWhereUniqueInput) => SeriesNullablePromise;
  serieses: (args?: {
    where?: SeriesWhereInput;
    orderBy?: SeriesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Series>;
  seriesesConnection: (args?: {
    where?: SeriesWhereInput;
    orderBy?: SeriesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SeriesConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userSeries: (where: UserSeriesWhereUniqueInput) => UserSeriesNullablePromise;
  userSerieses: (args?: {
    where?: UserSeriesWhereInput;
    orderBy?: UserSeriesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserSeries>;
  userSeriesesConnection: (args?: {
    where?: UserSeriesWhereInput;
    orderBy?: UserSeriesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserSeriesConnectionPromise;
  watchedEpisode: (
    where: WatchedEpisodeWhereUniqueInput
  ) => WatchedEpisodeNullablePromise;
  watchedEpisodes: (args?: {
    where?: WatchedEpisodeWhereInput;
    orderBy?: WatchedEpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WatchedEpisode>;
  watchedEpisodesConnection: (args?: {
    where?: WatchedEpisodeWhereInput;
    orderBy?: WatchedEpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WatchedEpisodeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEpisode: (data: EpisodeCreateInput) => EpisodePromise;
  updateEpisode: (args: {
    data: EpisodeUpdateInput;
    where: EpisodeWhereUniqueInput;
  }) => EpisodePromise;
  updateManyEpisodes: (args: {
    data: EpisodeUpdateManyMutationInput;
    where?: EpisodeWhereInput;
  }) => BatchPayloadPromise;
  upsertEpisode: (args: {
    where: EpisodeWhereUniqueInput;
    create: EpisodeCreateInput;
    update: EpisodeUpdateInput;
  }) => EpisodePromise;
  deleteEpisode: (where: EpisodeWhereUniqueInput) => EpisodePromise;
  deleteManyEpisodes: (where?: EpisodeWhereInput) => BatchPayloadPromise;
  createSeason: (data: SeasonCreateInput) => SeasonPromise;
  updateSeason: (args: {
    data: SeasonUpdateInput;
    where: SeasonWhereUniqueInput;
  }) => SeasonPromise;
  updateManySeasons: (args: {
    data: SeasonUpdateManyMutationInput;
    where?: SeasonWhereInput;
  }) => BatchPayloadPromise;
  upsertSeason: (args: {
    where: SeasonWhereUniqueInput;
    create: SeasonCreateInput;
    update: SeasonUpdateInput;
  }) => SeasonPromise;
  deleteSeason: (where: SeasonWhereUniqueInput) => SeasonPromise;
  deleteManySeasons: (where?: SeasonWhereInput) => BatchPayloadPromise;
  createSeries: (data: SeriesCreateInput) => SeriesPromise;
  updateSeries: (args: {
    data: SeriesUpdateInput;
    where: SeriesWhereUniqueInput;
  }) => SeriesPromise;
  updateManySerieses: (args: {
    data: SeriesUpdateManyMutationInput;
    where?: SeriesWhereInput;
  }) => BatchPayloadPromise;
  upsertSeries: (args: {
    where: SeriesWhereUniqueInput;
    create: SeriesCreateInput;
    update: SeriesUpdateInput;
  }) => SeriesPromise;
  deleteSeries: (where: SeriesWhereUniqueInput) => SeriesPromise;
  deleteManySerieses: (where?: SeriesWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserSeries: (data: UserSeriesCreateInput) => UserSeriesPromise;
  updateUserSeries: (args: {
    data: UserSeriesUpdateInput;
    where: UserSeriesWhereUniqueInput;
  }) => UserSeriesPromise;
  upsertUserSeries: (args: {
    where: UserSeriesWhereUniqueInput;
    create: UserSeriesCreateInput;
    update: UserSeriesUpdateInput;
  }) => UserSeriesPromise;
  deleteUserSeries: (where: UserSeriesWhereUniqueInput) => UserSeriesPromise;
  deleteManyUserSerieses: (where?: UserSeriesWhereInput) => BatchPayloadPromise;
  createWatchedEpisode: (
    data: WatchedEpisodeCreateInput
  ) => WatchedEpisodePromise;
  updateWatchedEpisode: (args: {
    data: WatchedEpisodeUpdateInput;
    where: WatchedEpisodeWhereUniqueInput;
  }) => WatchedEpisodePromise;
  upsertWatchedEpisode: (args: {
    where: WatchedEpisodeWhereUniqueInput;
    create: WatchedEpisodeCreateInput;
    update: WatchedEpisodeUpdateInput;
  }) => WatchedEpisodePromise;
  deleteWatchedEpisode: (
    where: WatchedEpisodeWhereUniqueInput
  ) => WatchedEpisodePromise;
  deleteManyWatchedEpisodes: (
    where?: WatchedEpisodeWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  episode: (
    where?: EpisodeSubscriptionWhereInput
  ) => EpisodeSubscriptionPayloadSubscription;
  season: (
    where?: SeasonSubscriptionWhereInput
  ) => SeasonSubscriptionPayloadSubscription;
  series: (
    where?: SeriesSubscriptionWhereInput
  ) => SeriesSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userSeries: (
    where?: UserSeriesSubscriptionWhereInput
  ) => UserSeriesSubscriptionPayloadSubscription;
  watchedEpisode: (
    where?: WatchedEpisodeSubscriptionWhereInput
  ) => WatchedEpisodeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EpisodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "number_ASC"
  | "number_DESC"
  | "release_ASC"
  | "release_DESC";

export type SeasonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC";

export type SeriesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type WatchedEpisodeOrderByInput = "id_ASC" | "id_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type UserSeriesOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EpisodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EpisodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  release?: Maybe<DateTimeInput>;
  release_not?: Maybe<DateTimeInput>;
  release_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  release_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  release_lt?: Maybe<DateTimeInput>;
  release_lte?: Maybe<DateTimeInput>;
  release_gt?: Maybe<DateTimeInput>;
  release_gte?: Maybe<DateTimeInput>;
  season?: Maybe<SeasonWhereInput>;
  AND?: Maybe<EpisodeWhereInput[] | EpisodeWhereInput>;
  OR?: Maybe<EpisodeWhereInput[] | EpisodeWhereInput>;
  NOT?: Maybe<EpisodeWhereInput[] | EpisodeWhereInput>;
}

export interface SeasonWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  episodes_every?: Maybe<EpisodeWhereInput>;
  episodes_some?: Maybe<EpisodeWhereInput>;
  episodes_none?: Maybe<EpisodeWhereInput>;
  series?: Maybe<SeriesWhereInput>;
  AND?: Maybe<SeasonWhereInput[] | SeasonWhereInput>;
  OR?: Maybe<SeasonWhereInput[] | SeasonWhereInput>;
  NOT?: Maybe<SeasonWhereInput[] | SeasonWhereInput>;
}

export interface SeriesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  seasons_every?: Maybe<SeasonWhereInput>;
  seasons_some?: Maybe<SeasonWhereInput>;
  seasons_none?: Maybe<SeasonWhereInput>;
  AND?: Maybe<SeriesWhereInput[] | SeriesWhereInput>;
  OR?: Maybe<SeriesWhereInput[] | SeriesWhereInput>;
  NOT?: Maybe<SeriesWhereInput[] | SeriesWhereInput>;
}

export type SeasonWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SeriesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface WatchedEpisodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userSeries?: Maybe<UserSeriesWhereInput>;
  episode?: Maybe<EpisodeWhereInput>;
  AND?: Maybe<WatchedEpisodeWhereInput[] | WatchedEpisodeWhereInput>;
  OR?: Maybe<WatchedEpisodeWhereInput[] | WatchedEpisodeWhereInput>;
  NOT?: Maybe<WatchedEpisodeWhereInput[] | WatchedEpisodeWhereInput>;
}

export interface UserSeriesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  series?: Maybe<SeriesWhereInput>;
  AND?: Maybe<UserSeriesWhereInput[] | UserSeriesWhereInput>;
  OR?: Maybe<UserSeriesWhereInput[] | UserSeriesWhereInput>;
  NOT?: Maybe<UserSeriesWhereInput[] | UserSeriesWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  watched_every?: Maybe<WatchedEpisodeWhereInput>;
  watched_some?: Maybe<WatchedEpisodeWhereInput>;
  watched_none?: Maybe<WatchedEpisodeWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserSeriesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WatchedEpisodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EpisodeCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  number: Int;
  release?: Maybe<DateTimeInput>;
  season: SeasonCreateOneWithoutEpisodesInput;
}

export interface SeasonCreateOneWithoutEpisodesInput {
  create?: Maybe<SeasonCreateWithoutEpisodesInput>;
  connect?: Maybe<SeasonWhereUniqueInput>;
}

export interface SeasonCreateWithoutEpisodesInput {
  id?: Maybe<ID_Input>;
  number: Int;
  series: SeriesCreateOneWithoutSeasonsInput;
}

export interface SeriesCreateOneWithoutSeasonsInput {
  create?: Maybe<SeriesCreateWithoutSeasonsInput>;
  connect?: Maybe<SeriesWhereUniqueInput>;
}

export interface SeriesCreateWithoutSeasonsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface EpisodeUpdateInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  release?: Maybe<DateTimeInput>;
  season?: Maybe<SeasonUpdateOneRequiredWithoutEpisodesInput>;
}

export interface SeasonUpdateOneRequiredWithoutEpisodesInput {
  create?: Maybe<SeasonCreateWithoutEpisodesInput>;
  update?: Maybe<SeasonUpdateWithoutEpisodesDataInput>;
  upsert?: Maybe<SeasonUpsertWithoutEpisodesInput>;
  connect?: Maybe<SeasonWhereUniqueInput>;
}

export interface SeasonUpdateWithoutEpisodesDataInput {
  number?: Maybe<Int>;
  series?: Maybe<SeriesUpdateOneRequiredWithoutSeasonsInput>;
}

export interface SeriesUpdateOneRequiredWithoutSeasonsInput {
  create?: Maybe<SeriesCreateWithoutSeasonsInput>;
  update?: Maybe<SeriesUpdateWithoutSeasonsDataInput>;
  upsert?: Maybe<SeriesUpsertWithoutSeasonsInput>;
  connect?: Maybe<SeriesWhereUniqueInput>;
}

export interface SeriesUpdateWithoutSeasonsDataInput {
  name?: Maybe<String>;
}

export interface SeriesUpsertWithoutSeasonsInput {
  update: SeriesUpdateWithoutSeasonsDataInput;
  create: SeriesCreateWithoutSeasonsInput;
}

export interface SeasonUpsertWithoutEpisodesInput {
  update: SeasonUpdateWithoutEpisodesDataInput;
  create: SeasonCreateWithoutEpisodesInput;
}

export interface EpisodeUpdateManyMutationInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  release?: Maybe<DateTimeInput>;
}

export interface SeasonCreateInput {
  id?: Maybe<ID_Input>;
  number: Int;
  episodes?: Maybe<EpisodeCreateManyWithoutSeasonInput>;
  series: SeriesCreateOneWithoutSeasonsInput;
}

export interface EpisodeCreateManyWithoutSeasonInput {
  create?: Maybe<
    EpisodeCreateWithoutSeasonInput[] | EpisodeCreateWithoutSeasonInput
  >;
  connect?: Maybe<EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput>;
}

export interface EpisodeCreateWithoutSeasonInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  number: Int;
  release?: Maybe<DateTimeInput>;
}

export interface SeasonUpdateInput {
  number?: Maybe<Int>;
  episodes?: Maybe<EpisodeUpdateManyWithoutSeasonInput>;
  series?: Maybe<SeriesUpdateOneRequiredWithoutSeasonsInput>;
}

export interface EpisodeUpdateManyWithoutSeasonInput {
  create?: Maybe<
    EpisodeCreateWithoutSeasonInput[] | EpisodeCreateWithoutSeasonInput
  >;
  delete?: Maybe<EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput>;
  connect?: Maybe<EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput>;
  set?: Maybe<EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput>;
  disconnect?: Maybe<EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput>;
  update?: Maybe<
    | EpisodeUpdateWithWhereUniqueWithoutSeasonInput[]
    | EpisodeUpdateWithWhereUniqueWithoutSeasonInput
  >;
  upsert?: Maybe<
    | EpisodeUpsertWithWhereUniqueWithoutSeasonInput[]
    | EpisodeUpsertWithWhereUniqueWithoutSeasonInput
  >;
  deleteMany?: Maybe<EpisodeScalarWhereInput[] | EpisodeScalarWhereInput>;
  updateMany?: Maybe<
    | EpisodeUpdateManyWithWhereNestedInput[]
    | EpisodeUpdateManyWithWhereNestedInput
  >;
}

export interface EpisodeUpdateWithWhereUniqueWithoutSeasonInput {
  where: EpisodeWhereUniqueInput;
  data: EpisodeUpdateWithoutSeasonDataInput;
}

export interface EpisodeUpdateWithoutSeasonDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  release?: Maybe<DateTimeInput>;
}

export interface EpisodeUpsertWithWhereUniqueWithoutSeasonInput {
  where: EpisodeWhereUniqueInput;
  update: EpisodeUpdateWithoutSeasonDataInput;
  create: EpisodeCreateWithoutSeasonInput;
}

export interface EpisodeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  release?: Maybe<DateTimeInput>;
  release_not?: Maybe<DateTimeInput>;
  release_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  release_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  release_lt?: Maybe<DateTimeInput>;
  release_lte?: Maybe<DateTimeInput>;
  release_gt?: Maybe<DateTimeInput>;
  release_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EpisodeScalarWhereInput[] | EpisodeScalarWhereInput>;
  OR?: Maybe<EpisodeScalarWhereInput[] | EpisodeScalarWhereInput>;
  NOT?: Maybe<EpisodeScalarWhereInput[] | EpisodeScalarWhereInput>;
}

export interface EpisodeUpdateManyWithWhereNestedInput {
  where: EpisodeScalarWhereInput;
  data: EpisodeUpdateManyDataInput;
}

export interface EpisodeUpdateManyDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  release?: Maybe<DateTimeInput>;
}

export interface SeasonUpdateManyMutationInput {
  number?: Maybe<Int>;
}

export interface SeriesCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  seasons?: Maybe<SeasonCreateManyWithoutSeriesInput>;
}

export interface SeasonCreateManyWithoutSeriesInput {
  create?: Maybe<
    SeasonCreateWithoutSeriesInput[] | SeasonCreateWithoutSeriesInput
  >;
  connect?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
}

export interface SeasonCreateWithoutSeriesInput {
  id?: Maybe<ID_Input>;
  number: Int;
  episodes?: Maybe<EpisodeCreateManyWithoutSeasonInput>;
}

export interface SeriesUpdateInput {
  name?: Maybe<String>;
  seasons?: Maybe<SeasonUpdateManyWithoutSeriesInput>;
}

export interface SeasonUpdateManyWithoutSeriesInput {
  create?: Maybe<
    SeasonCreateWithoutSeriesInput[] | SeasonCreateWithoutSeriesInput
  >;
  delete?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
  connect?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
  set?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
  disconnect?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
  update?: Maybe<
    | SeasonUpdateWithWhereUniqueWithoutSeriesInput[]
    | SeasonUpdateWithWhereUniqueWithoutSeriesInput
  >;
  upsert?: Maybe<
    | SeasonUpsertWithWhereUniqueWithoutSeriesInput[]
    | SeasonUpsertWithWhereUniqueWithoutSeriesInput
  >;
  deleteMany?: Maybe<SeasonScalarWhereInput[] | SeasonScalarWhereInput>;
  updateMany?: Maybe<
    | SeasonUpdateManyWithWhereNestedInput[]
    | SeasonUpdateManyWithWhereNestedInput
  >;
}

export interface SeasonUpdateWithWhereUniqueWithoutSeriesInput {
  where: SeasonWhereUniqueInput;
  data: SeasonUpdateWithoutSeriesDataInput;
}

export interface SeasonUpdateWithoutSeriesDataInput {
  number?: Maybe<Int>;
  episodes?: Maybe<EpisodeUpdateManyWithoutSeasonInput>;
}

export interface SeasonUpsertWithWhereUniqueWithoutSeriesInput {
  where: SeasonWhereUniqueInput;
  update: SeasonUpdateWithoutSeriesDataInput;
  create: SeasonCreateWithoutSeriesInput;
}

export interface SeasonScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  AND?: Maybe<SeasonScalarWhereInput[] | SeasonScalarWhereInput>;
  OR?: Maybe<SeasonScalarWhereInput[] | SeasonScalarWhereInput>;
  NOT?: Maybe<SeasonScalarWhereInput[] | SeasonScalarWhereInput>;
}

export interface SeasonUpdateManyWithWhereNestedInput {
  where: SeasonScalarWhereInput;
  data: SeasonUpdateManyDataInput;
}

export interface SeasonUpdateManyDataInput {
  number?: Maybe<Int>;
}

export interface SeriesUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  watched?: Maybe<WatchedEpisodeCreateManyInput>;
}

export interface WatchedEpisodeCreateManyInput {
  create?: Maybe<WatchedEpisodeCreateInput[] | WatchedEpisodeCreateInput>;
  connect?: Maybe<
    WatchedEpisodeWhereUniqueInput[] | WatchedEpisodeWhereUniqueInput
  >;
}

export interface WatchedEpisodeCreateInput {
  id?: Maybe<ID_Input>;
  userSeries: UserSeriesCreateOneInput;
  episode: EpisodeCreateOneInput;
}

export interface UserSeriesCreateOneInput {
  create?: Maybe<UserSeriesCreateInput>;
  connect?: Maybe<UserSeriesWhereUniqueInput>;
}

export interface UserSeriesCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  series: SeriesCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SeriesCreateOneInput {
  create?: Maybe<SeriesCreateInput>;
  connect?: Maybe<SeriesWhereUniqueInput>;
}

export interface EpisodeCreateOneInput {
  create?: Maybe<EpisodeCreateInput>;
  connect?: Maybe<EpisodeWhereUniqueInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  watched?: Maybe<WatchedEpisodeUpdateManyInput>;
}

export interface WatchedEpisodeUpdateManyInput {
  create?: Maybe<WatchedEpisodeCreateInput[] | WatchedEpisodeCreateInput>;
  update?: Maybe<
    | WatchedEpisodeUpdateWithWhereUniqueNestedInput[]
    | WatchedEpisodeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WatchedEpisodeUpsertWithWhereUniqueNestedInput[]
    | WatchedEpisodeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    WatchedEpisodeWhereUniqueInput[] | WatchedEpisodeWhereUniqueInput
  >;
  connect?: Maybe<
    WatchedEpisodeWhereUniqueInput[] | WatchedEpisodeWhereUniqueInput
  >;
  set?: Maybe<
    WatchedEpisodeWhereUniqueInput[] | WatchedEpisodeWhereUniqueInput
  >;
  disconnect?: Maybe<
    WatchedEpisodeWhereUniqueInput[] | WatchedEpisodeWhereUniqueInput
  >;
  deleteMany?: Maybe<
    WatchedEpisodeScalarWhereInput[] | WatchedEpisodeScalarWhereInput
  >;
}

export interface WatchedEpisodeUpdateWithWhereUniqueNestedInput {
  where: WatchedEpisodeWhereUniqueInput;
  data: WatchedEpisodeUpdateDataInput;
}

export interface WatchedEpisodeUpdateDataInput {
  userSeries?: Maybe<UserSeriesUpdateOneRequiredInput>;
  episode?: Maybe<EpisodeUpdateOneRequiredInput>;
}

export interface UserSeriesUpdateOneRequiredInput {
  create?: Maybe<UserSeriesCreateInput>;
  update?: Maybe<UserSeriesUpdateDataInput>;
  upsert?: Maybe<UserSeriesUpsertNestedInput>;
  connect?: Maybe<UserSeriesWhereUniqueInput>;
}

export interface UserSeriesUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  series?: Maybe<SeriesUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  watched?: Maybe<WatchedEpisodeUpdateManyInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface SeriesUpdateOneRequiredInput {
  create?: Maybe<SeriesCreateInput>;
  update?: Maybe<SeriesUpdateDataInput>;
  upsert?: Maybe<SeriesUpsertNestedInput>;
  connect?: Maybe<SeriesWhereUniqueInput>;
}

export interface SeriesUpdateDataInput {
  name?: Maybe<String>;
  seasons?: Maybe<SeasonUpdateManyWithoutSeriesInput>;
}

export interface SeriesUpsertNestedInput {
  update: SeriesUpdateDataInput;
  create: SeriesCreateInput;
}

export interface UserSeriesUpsertNestedInput {
  update: UserSeriesUpdateDataInput;
  create: UserSeriesCreateInput;
}

export interface EpisodeUpdateOneRequiredInput {
  create?: Maybe<EpisodeCreateInput>;
  update?: Maybe<EpisodeUpdateDataInput>;
  upsert?: Maybe<EpisodeUpsertNestedInput>;
  connect?: Maybe<EpisodeWhereUniqueInput>;
}

export interface EpisodeUpdateDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  release?: Maybe<DateTimeInput>;
  season?: Maybe<SeasonUpdateOneRequiredWithoutEpisodesInput>;
}

export interface EpisodeUpsertNestedInput {
  update: EpisodeUpdateDataInput;
  create: EpisodeCreateInput;
}

export interface WatchedEpisodeUpsertWithWhereUniqueNestedInput {
  where: WatchedEpisodeWhereUniqueInput;
  update: WatchedEpisodeUpdateDataInput;
  create: WatchedEpisodeCreateInput;
}

export interface WatchedEpisodeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<
    WatchedEpisodeScalarWhereInput[] | WatchedEpisodeScalarWhereInput
  >;
  OR?: Maybe<WatchedEpisodeScalarWhereInput[] | WatchedEpisodeScalarWhereInput>;
  NOT?: Maybe<
    WatchedEpisodeScalarWhereInput[] | WatchedEpisodeScalarWhereInput
  >;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserSeriesUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  series?: Maybe<SeriesUpdateOneRequiredInput>;
}

export interface WatchedEpisodeUpdateInput {
  userSeries?: Maybe<UserSeriesUpdateOneRequiredInput>;
  episode?: Maybe<EpisodeUpdateOneRequiredInput>;
}

export interface EpisodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EpisodeWhereInput>;
  AND?: Maybe<EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput>;
  OR?: Maybe<EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput>;
  NOT?: Maybe<EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput>;
}

export interface SeasonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SeasonWhereInput>;
  AND?: Maybe<SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput>;
  OR?: Maybe<SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput>;
  NOT?: Maybe<SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput>;
}

export interface SeriesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SeriesWhereInput>;
  AND?: Maybe<SeriesSubscriptionWhereInput[] | SeriesSubscriptionWhereInput>;
  OR?: Maybe<SeriesSubscriptionWhereInput[] | SeriesSubscriptionWhereInput>;
  NOT?: Maybe<SeriesSubscriptionWhereInput[] | SeriesSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserSeriesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserSeriesWhereInput>;
  AND?: Maybe<
    UserSeriesSubscriptionWhereInput[] | UserSeriesSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserSeriesSubscriptionWhereInput[] | UserSeriesSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserSeriesSubscriptionWhereInput[] | UserSeriesSubscriptionWhereInput
  >;
}

export interface WatchedEpisodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WatchedEpisodeWhereInput>;
  AND?: Maybe<
    | WatchedEpisodeSubscriptionWhereInput[]
    | WatchedEpisodeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | WatchedEpisodeSubscriptionWhereInput[]
    | WatchedEpisodeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | WatchedEpisodeSubscriptionWhereInput[]
    | WatchedEpisodeSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Episode {
  id: ID_Output;
  name?: String;
  number: Int;
  release?: DateTimeOutput;
}

export interface EpisodePromise extends Promise<Episode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  release: () => Promise<DateTimeOutput>;
  season: <T = SeasonPromise>() => T;
}

export interface EpisodeSubscription
  extends Promise<AsyncIterator<Episode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  release: () => Promise<AsyncIterator<DateTimeOutput>>;
  season: <T = SeasonSubscription>() => T;
}

export interface EpisodeNullablePromise
  extends Promise<Episode | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  release: () => Promise<DateTimeOutput>;
  season: <T = SeasonPromise>() => T;
}

export interface Season {
  id: ID_Output;
  number: Int;
}

export interface SeasonPromise extends Promise<Season>, Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  episodes: <T = FragmentableArray<Episode>>(args?: {
    where?: EpisodeWhereInput;
    orderBy?: EpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  series: <T = SeriesPromise>() => T;
}

export interface SeasonSubscription
  extends Promise<AsyncIterator<Season>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  episodes: <T = Promise<AsyncIterator<EpisodeSubscription>>>(args?: {
    where?: EpisodeWhereInput;
    orderBy?: EpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  series: <T = SeriesSubscription>() => T;
}

export interface SeasonNullablePromise
  extends Promise<Season | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  episodes: <T = FragmentableArray<Episode>>(args?: {
    where?: EpisodeWhereInput;
    orderBy?: EpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  series: <T = SeriesPromise>() => T;
}

export interface Series {
  id: ID_Output;
  name: String;
}

export interface SeriesPromise extends Promise<Series>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  seasons: <T = FragmentableArray<Season>>(args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SeriesSubscription
  extends Promise<AsyncIterator<Series>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  seasons: <T = Promise<AsyncIterator<SeasonSubscription>>>(args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SeriesNullablePromise
  extends Promise<Series | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  seasons: <T = FragmentableArray<Season>>(args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EpisodeConnection {
  pageInfo: PageInfo;
  edges: EpisodeEdge[];
}

export interface EpisodeConnectionPromise
  extends Promise<EpisodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EpisodeEdge>>() => T;
  aggregate: <T = AggregateEpisodePromise>() => T;
}

export interface EpisodeConnectionSubscription
  extends Promise<AsyncIterator<EpisodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EpisodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEpisodeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EpisodeEdge {
  node: Episode;
  cursor: String;
}

export interface EpisodeEdgePromise extends Promise<EpisodeEdge>, Fragmentable {
  node: <T = EpisodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EpisodeEdgeSubscription
  extends Promise<AsyncIterator<EpisodeEdge>>,
    Fragmentable {
  node: <T = EpisodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEpisode {
  count: Int;
}

export interface AggregateEpisodePromise
  extends Promise<AggregateEpisode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEpisodeSubscription
  extends Promise<AsyncIterator<AggregateEpisode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SeasonConnection {
  pageInfo: PageInfo;
  edges: SeasonEdge[];
}

export interface SeasonConnectionPromise
  extends Promise<SeasonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeasonEdge>>() => T;
  aggregate: <T = AggregateSeasonPromise>() => T;
}

export interface SeasonConnectionSubscription
  extends Promise<AsyncIterator<SeasonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeasonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeasonSubscription>() => T;
}

export interface SeasonEdge {
  node: Season;
  cursor: String;
}

export interface SeasonEdgePromise extends Promise<SeasonEdge>, Fragmentable {
  node: <T = SeasonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeasonEdgeSubscription
  extends Promise<AsyncIterator<SeasonEdge>>,
    Fragmentable {
  node: <T = SeasonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSeason {
  count: Int;
}

export interface AggregateSeasonPromise
  extends Promise<AggregateSeason>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeasonSubscription
  extends Promise<AsyncIterator<AggregateSeason>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SeriesConnection {
  pageInfo: PageInfo;
  edges: SeriesEdge[];
}

export interface SeriesConnectionPromise
  extends Promise<SeriesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeriesEdge>>() => T;
  aggregate: <T = AggregateSeriesPromise>() => T;
}

export interface SeriesConnectionSubscription
  extends Promise<AsyncIterator<SeriesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeriesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeriesSubscription>() => T;
}

export interface SeriesEdge {
  node: Series;
  cursor: String;
}

export interface SeriesEdgePromise extends Promise<SeriesEdge>, Fragmentable {
  node: <T = SeriesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeriesEdgeSubscription
  extends Promise<AsyncIterator<SeriesEdge>>,
    Fragmentable {
  node: <T = SeriesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSeries {
  count: Int;
}

export interface AggregateSeriesPromise
  extends Promise<AggregateSeries>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeriesSubscription
  extends Promise<AsyncIterator<AggregateSeries>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  watched: <T = FragmentableArray<WatchedEpisode>>(args?: {
    where?: WatchedEpisodeWhereInput;
    orderBy?: WatchedEpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  watched: <T = Promise<AsyncIterator<WatchedEpisodeSubscription>>>(args?: {
    where?: WatchedEpisodeWhereInput;
    orderBy?: WatchedEpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  watched: <T = FragmentableArray<WatchedEpisode>>(args?: {
    where?: WatchedEpisodeWhereInput;
    orderBy?: WatchedEpisodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WatchedEpisode {
  id: ID_Output;
}

export interface WatchedEpisodePromise
  extends Promise<WatchedEpisode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userSeries: <T = UserSeriesPromise>() => T;
  episode: <T = EpisodePromise>() => T;
}

export interface WatchedEpisodeSubscription
  extends Promise<AsyncIterator<WatchedEpisode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userSeries: <T = UserSeriesSubscription>() => T;
  episode: <T = EpisodeSubscription>() => T;
}

export interface WatchedEpisodeNullablePromise
  extends Promise<WatchedEpisode | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userSeries: <T = UserSeriesPromise>() => T;
  episode: <T = EpisodePromise>() => T;
}

export interface UserSeries {
  id: ID_Output;
}

export interface UserSeriesPromise extends Promise<UserSeries>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  series: <T = SeriesPromise>() => T;
}

export interface UserSeriesSubscription
  extends Promise<AsyncIterator<UserSeries>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  series: <T = SeriesSubscription>() => T;
}

export interface UserSeriesNullablePromise
  extends Promise<UserSeries | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  series: <T = SeriesPromise>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSeriesConnection {
  pageInfo: PageInfo;
  edges: UserSeriesEdge[];
}

export interface UserSeriesConnectionPromise
  extends Promise<UserSeriesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserSeriesEdge>>() => T;
  aggregate: <T = AggregateUserSeriesPromise>() => T;
}

export interface UserSeriesConnectionSubscription
  extends Promise<AsyncIterator<UserSeriesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserSeriesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSeriesSubscription>() => T;
}

export interface UserSeriesEdge {
  node: UserSeries;
  cursor: String;
}

export interface UserSeriesEdgePromise
  extends Promise<UserSeriesEdge>,
    Fragmentable {
  node: <T = UserSeriesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserSeriesEdgeSubscription
  extends Promise<AsyncIterator<UserSeriesEdge>>,
    Fragmentable {
  node: <T = UserSeriesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserSeries {
  count: Int;
}

export interface AggregateUserSeriesPromise
  extends Promise<AggregateUserSeries>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSeriesSubscription
  extends Promise<AsyncIterator<AggregateUserSeries>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WatchedEpisodeConnection {
  pageInfo: PageInfo;
  edges: WatchedEpisodeEdge[];
}

export interface WatchedEpisodeConnectionPromise
  extends Promise<WatchedEpisodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WatchedEpisodeEdge>>() => T;
  aggregate: <T = AggregateWatchedEpisodePromise>() => T;
}

export interface WatchedEpisodeConnectionSubscription
  extends Promise<AsyncIterator<WatchedEpisodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WatchedEpisodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWatchedEpisodeSubscription>() => T;
}

export interface WatchedEpisodeEdge {
  node: WatchedEpisode;
  cursor: String;
}

export interface WatchedEpisodeEdgePromise
  extends Promise<WatchedEpisodeEdge>,
    Fragmentable {
  node: <T = WatchedEpisodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WatchedEpisodeEdgeSubscription
  extends Promise<AsyncIterator<WatchedEpisodeEdge>>,
    Fragmentable {
  node: <T = WatchedEpisodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWatchedEpisode {
  count: Int;
}

export interface AggregateWatchedEpisodePromise
  extends Promise<AggregateWatchedEpisode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWatchedEpisodeSubscription
  extends Promise<AsyncIterator<AggregateWatchedEpisode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EpisodeSubscriptionPayload {
  mutation: MutationType;
  node: Episode;
  updatedFields: String[];
  previousValues: EpisodePreviousValues;
}

export interface EpisodeSubscriptionPayloadPromise
  extends Promise<EpisodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EpisodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EpisodePreviousValuesPromise>() => T;
}

export interface EpisodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EpisodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EpisodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EpisodePreviousValuesSubscription>() => T;
}

export interface EpisodePreviousValues {
  id: ID_Output;
  name?: String;
  number: Int;
  release?: DateTimeOutput;
}

export interface EpisodePreviousValuesPromise
  extends Promise<EpisodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  release: () => Promise<DateTimeOutput>;
}

export interface EpisodePreviousValuesSubscription
  extends Promise<AsyncIterator<EpisodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  release: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SeasonSubscriptionPayload {
  mutation: MutationType;
  node: Season;
  updatedFields: String[];
  previousValues: SeasonPreviousValues;
}

export interface SeasonSubscriptionPayloadPromise
  extends Promise<SeasonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeasonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeasonPreviousValuesPromise>() => T;
}

export interface SeasonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeasonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeasonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeasonPreviousValuesSubscription>() => T;
}

export interface SeasonPreviousValues {
  id: ID_Output;
  number: Int;
}

export interface SeasonPreviousValuesPromise
  extends Promise<SeasonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
}

export interface SeasonPreviousValuesSubscription
  extends Promise<AsyncIterator<SeasonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
}

export interface SeriesSubscriptionPayload {
  mutation: MutationType;
  node: Series;
  updatedFields: String[];
  previousValues: SeriesPreviousValues;
}

export interface SeriesSubscriptionPayloadPromise
  extends Promise<SeriesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeriesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeriesPreviousValuesPromise>() => T;
}

export interface SeriesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeriesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeriesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeriesPreviousValuesSubscription>() => T;
}

export interface SeriesPreviousValues {
  id: ID_Output;
  name: String;
}

export interface SeriesPreviousValuesPromise
  extends Promise<SeriesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SeriesPreviousValuesSubscription
  extends Promise<AsyncIterator<SeriesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSeriesSubscriptionPayload {
  mutation: MutationType;
  node: UserSeries;
  updatedFields: String[];
  previousValues: UserSeriesPreviousValues;
}

export interface UserSeriesSubscriptionPayloadPromise
  extends Promise<UserSeriesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserSeriesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserSeriesPreviousValuesPromise>() => T;
}

export interface UserSeriesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSeriesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSeriesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserSeriesPreviousValuesSubscription>() => T;
}

export interface UserSeriesPreviousValues {
  id: ID_Output;
}

export interface UserSeriesPreviousValuesPromise
  extends Promise<UserSeriesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface UserSeriesPreviousValuesSubscription
  extends Promise<AsyncIterator<UserSeriesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface WatchedEpisodeSubscriptionPayload {
  mutation: MutationType;
  node: WatchedEpisode;
  updatedFields: String[];
  previousValues: WatchedEpisodePreviousValues;
}

export interface WatchedEpisodeSubscriptionPayloadPromise
  extends Promise<WatchedEpisodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WatchedEpisodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WatchedEpisodePreviousValuesPromise>() => T;
}

export interface WatchedEpisodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WatchedEpisodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WatchedEpisodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WatchedEpisodePreviousValuesSubscription>() => T;
}

export interface WatchedEpisodePreviousValues {
  id: ID_Output;
}

export interface WatchedEpisodePreviousValuesPromise
  extends Promise<WatchedEpisodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface WatchedEpisodePreviousValuesSubscription
  extends Promise<AsyncIterator<WatchedEpisodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "WatchedEpisode",
    embedded: false
  },
  {
    name: "UserSeries",
    embedded: false
  },
  {
    name: "Episode",
    embedded: false
  },
  {
    name: "Season",
    embedded: false
  },
  {
    name: "Series",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
