### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateEpisode {
  count: Int!
}

type AggregateSeason {
  count: Int!
}

type AggregateSeries {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserSeries {
  count: Int!
}

type AggregateWatchedEpisode {
  count: Int!
}

scalar DateTime

type Episode {
  id: ID!
  name: String
  number: Int!
  release: DateTime
  season: Season!
}

type EpisodeConnection {
  aggregate: AggregateEpisode!
  edges: [EpisodeEdge!]!
  pageInfo: PageInfo!
}

type EpisodeEdge {
  cursor: String!
  node: Episode!
}

enum EpisodeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  number_ASC
  number_DESC
  release_ASC
  release_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EpisodeWhereInput {
  AND: [EpisodeWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EpisodeWhereInput!]
  number: Int
  number_gt: Int
  number_gte: Int
  number_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_not: Int
  number_not_in: [Int!]
  OR: [EpisodeWhereInput!]
  release: DateTime
  release_gt: DateTime
  release_gte: DateTime
  release_in: [DateTime!]
  release_lt: DateTime
  release_lte: DateTime
  release_not: DateTime
  release_not_in: [DateTime!]
  season: SeasonWhereInput
}

input EpisodeWhereUniqueInput {
  id: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  episode(where: EpisodeWhereUniqueInput!): Episode
  episodes(after: String, before: String, first: Int, last: Int, orderBy: EpisodeOrderByInput, skip: Int, where: EpisodeWhereInput): [Episode!]!
  episodesConnection(after: String, before: String, first: Int, last: Int, orderBy: EpisodeOrderByInput, skip: Int, where: EpisodeWhereInput): EpisodeConnection!
  season(where: SeasonWhereUniqueInput!): Season
  seasons(after: String, before: String, first: Int, last: Int, orderBy: SeasonOrderByInput, skip: Int, where: SeasonWhereInput): [Season!]!
  seasonsConnection(after: String, before: String, first: Int, last: Int, orderBy: SeasonOrderByInput, skip: Int, where: SeasonWhereInput): SeasonConnection!
  series(where: SeriesWhereUniqueInput!): Series
  serieses(after: String, before: String, first: Int, last: Int, orderBy: SeriesOrderByInput, skip: Int, where: SeriesWhereInput): [Series!]!
  seriesesConnection(after: String, before: String, first: Int, last: Int, orderBy: SeriesOrderByInput, skip: Int, where: SeriesWhereInput): SeriesConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
  userSeries(where: UserSeriesWhereUniqueInput!): UserSeries
  userSerieses(after: String, before: String, first: Int, last: Int, orderBy: UserSeriesOrderByInput, skip: Int, where: UserSeriesWhereInput): [UserSeries!]!
  userSeriesesConnection(after: String, before: String, first: Int, last: Int, orderBy: UserSeriesOrderByInput, skip: Int, where: UserSeriesWhereInput): UserSeriesConnection!
  watchedEpisode(where: WatchedEpisodeWhereUniqueInput!): WatchedEpisode
  watchedEpisodes(after: String, before: String, first: Int, last: Int, orderBy: WatchedEpisodeOrderByInput, skip: Int, where: WatchedEpisodeWhereInput): [WatchedEpisode!]!
  watchedEpisodesConnection(after: String, before: String, first: Int, last: Int, orderBy: WatchedEpisodeOrderByInput, skip: Int, where: WatchedEpisodeWhereInput): WatchedEpisodeConnection!
}

type Season {
  episodes(after: String, before: String, first: Int, last: Int, orderBy: EpisodeOrderByInput, skip: Int, where: EpisodeWhereInput): [Episode!]
  id: ID!
  number: Int!
  series: Series!
}

type SeasonConnection {
  aggregate: AggregateSeason!
  edges: [SeasonEdge!]!
  pageInfo: PageInfo!
}

type SeasonEdge {
  cursor: String!
  node: Season!
}

enum SeasonOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SeasonWhereInput {
  AND: [SeasonWhereInput!]
  episodes_every: EpisodeWhereInput
  episodes_none: EpisodeWhereInput
  episodes_some: EpisodeWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [SeasonWhereInput!]
  number: Int
  number_gt: Int
  number_gte: Int
  number_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_not: Int
  number_not_in: [Int!]
  OR: [SeasonWhereInput!]
  series: SeriesWhereInput
}

input SeasonWhereUniqueInput {
  id: ID
}

type Series {
  id: ID!
  name: String!
  seasons(after: String, before: String, first: Int, last: Int, orderBy: SeasonOrderByInput, skip: Int, where: SeasonWhereInput): [Season!]
}

type SeriesConnection {
  aggregate: AggregateSeries!
  edges: [SeriesEdge!]!
  pageInfo: PageInfo!
}

type SeriesEdge {
  cursor: String!
  node: Series!
}

enum SeriesOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SeriesWhereInput {
  AND: [SeriesWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [SeriesWhereInput!]
  OR: [SeriesWhereInput!]
  seasons_every: SeasonWhereInput
  seasons_none: SeasonWhereInput
  seasons_some: SeasonWhereInput
}

input SeriesWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  watched(after: String, before: String, first: Int, last: Int, orderBy: WatchedEpisodeOrderByInput, skip: Int, where: WatchedEpisodeWhereInput): [WatchedEpisode!]
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserSeries {
  id: ID!
  series: Series!
  user: User!
}

type UserSeriesConnection {
  aggregate: AggregateUserSeries!
  edges: [UserSeriesEdge!]!
  pageInfo: PageInfo!
}

type UserSeriesEdge {
  cursor: String!
  node: UserSeries!
}

enum UserSeriesOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserSeriesWhereInput {
  AND: [UserSeriesWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserSeriesWhereInput!]
  OR: [UserSeriesWhereInput!]
  series: SeriesWhereInput
  user: UserWhereInput
}

input UserSeriesWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  watched_every: WatchedEpisodeWhereInput
  watched_none: WatchedEpisodeWhereInput
  watched_some: WatchedEpisodeWhereInput
}

input UserWhereUniqueInput {
  id: ID
}

type WatchedEpisode {
  episode: Episode!
  id: ID!
  userSeries: UserSeries!
}

type WatchedEpisodeConnection {
  aggregate: AggregateWatchedEpisode!
  edges: [WatchedEpisodeEdge!]!
  pageInfo: PageInfo!
}

type WatchedEpisodeEdge {
  cursor: String!
  node: WatchedEpisode!
}

enum WatchedEpisodeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input WatchedEpisodeWhereInput {
  AND: [WatchedEpisodeWhereInput!]
  episode: EpisodeWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [WatchedEpisodeWhereInput!]
  OR: [WatchedEpisodeWhereInput!]
  userSeries: UserSeriesWhereInput
}

input WatchedEpisodeWhereUniqueInput {
  id: ID
}
